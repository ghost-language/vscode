{
	"name": "Ghost",
	"scopeName": "source.ghost",
	"fileTypes": ["ghost"],

	"patterns": [
		{ "include": "#code" }
	],

	"repository": {
		"code": {
			"patterns": [
				{ "include": "block" },
				{ "include": "#blockComment" },
				{ "include": "#comment" },
				{ "include": "#constant" },
				{ "include": "function" },
				{ "include": "#keyword" },
				{ "include": "#library" },
				{ "include": "#puncuation" },
				{ "include": "#string" }
			]
		},

		"block": {
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "puncuation.section.block.begin.ghost"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "puncuation.section.block.end.ghost"
				}
			},
			"name": "meta.block.ghost",
			"patterns": [
				{ "include": "#code" }
			]
		},

		"blockComment": {
			"name": "comment.block.ghost",
			"begin": "/\\*",
			"end": "\\*/",
			"patterns": [
				{ "include": "#blockComment" }
			]
		},

		"comment": {
			"name": "comment.line.ghost",
			"match": "//.*"
		},

		"constant": {
			"patterns": [
				{
					"name": "constant.language.null.ghost",
					"match": "\\b(null)\\b"
				},
				{
					"name": "constant.language.boolean.ghost",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.numeric.ghost",
					"match": "\\b(0x[0-9a-fA-F]*|[0-9]+(\\.?[0-9]*)?(e(\\+|-)?[0-9]+)?)\\b"
				},
				{
					"name": "constant.numeric.hexadecimal.ghost",
					"match": "0x[A-Fa-f0-9]+"
				}
			]
		},

		"keyword": {
			"patterns": [
				{
					"name": "keyword.function.ghost",
					"match": "\\b(function)\\b"
				},
				{
					"name": "keyword.control.ghost",
					"match": "\\b(?:break|else|for|if|import|in|return|while)\\b"
				},
				{
					"name": "keyword.operator.logical.ghost",
					"match": "\\b(!|and|or)\\b"
				},
				{
					"name": "keyword.operator.range.ghost",
					"match": "(\\.\\.)"
				},
				{
					"name": "keyword.operator.arithmetic.ghost",
					"match": "(\\-|\\+|\\*|\/|%)"
				},
				{
					"name": "keyword.operator.comparison.ghost",
					"match": "(==|!=|<=|>=|<|>)"
				},
				{
					"name": "keyword.operator.assignment.ghost",
					"match": "(:=)"
				}
			]
		},

		"library": {
			"patterns": [
				{
					"name": "support.function.ghost",
					"match": "\\b(exit|identifiers|input|number|print|sleep|string|tail|type|write|file.read|file.write|ghost.version|math.abs|math.cos|math.pi|math.random|math.round|os.args)\\b"
				}
			]
		},

		"puncutation": {
			"patterns": [
				{
					"name": "puncuation.other.comma.ghost",
					"match": ","
				},
				{
					"name": "puncuation.other.period.ghost",
					"match": "\\.(?!\\.)"
				},
				{
					"name": "punctuation.other.colon.ghost",
					"match": ":(?!=)"
				}
			]
		},

		"string": {
			"patterns": [
				{
					"name": "string.quoted.double.ghost",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{ "include": "#stringEscapes" }
					]
				},
				{
					"name": "string.quoted.single.ghost",
					"begin": "'",
					"end": "'"
				}
			]
		},

		"stringEscapes": {
			"patterns": [
				{
					"name": "constant.character.escape.ghost",
					"match": "\\\\(?:[0\"\\abfnrtv]|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{4})"
				},
				{
					"name": "invalid.illegal.unknown-escape.ghost",
					"match": "\\\\(?:x[0-9A-Fa-f]{0,1}|u[0-9A-Fa-f]{0,3}|U[0-9A-Fa-f]{0,7}|.)"
				},
				{
					"name": "constant.character.interpolation.ghost",
					"match": "%\\((.*?)\\)"
				}
			]
		},

		"variable": {
			"patterns": [
				{
					"name": "variable.other.readwrite.ghost",
					"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
				}
			]
		}
	}
}